package com.malware.datasvc;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class DataService {

    private static final Logger LOG = LoggerFactory.getLogger(DataService.class);

    // last 2 params are sid & tid
    private static final String MALWARE_RESULT_PATH_FORMAT = "/camel/data/lookupProcess/%s/%s";

    private static final String JSON_CONTENT_TYPE = "application/json";

    @Value("${dataservice.base.url}")
    private String baseUrl;

    private final ObjectMapper objectMapper;
    private final CloseableHttpClient httpClient;

    public DataService(ObjectMapper objectMapper, CloseableHttpClient httpClient) {
        this.objectMapper = objectMapper;
        this.httpClient = httpClient;
    }

    /**
     * Query data service to lookup the PAM process instance ID from the sid and tid
     * @param sid the sid
     * @param tid the tid
     * @return The value returned from the cache, including the processInstanceId.
     */
    public IdCacheLookup lookupProcessId(String sid, String tid) {

        String url = baseUrl + String.format(MALWARE_RESULT_PATH_FORMAT, sid, tid);
        LOG.info("url = {}", url);

        HttpGet request = new HttpGet(url);
        request.addHeader(HttpHeaders.ACCEPT, JSON_CONTENT_TYPE);
        try (CloseableHttpResponse response = httpClient.execute(request)) {
            HttpEntity entity = response.getEntity();
            int statusCode = response.getStatusLine().getStatusCode();

            if (statusCode == 200 && entity != null) {
                String json = EntityUtils.toString(entity);
                return parseJsonResult(json);
            } else {
                LOG.warn("Failed to send cache lookup request with code = {}, entity = {}", statusCode, entity);
                throw new RuntimeException("HTTP request failed");
            }

        } catch (IOException e) {
            LOG.warn("HTTP POST request to url {} failed", url);
            throw new RuntimeException("http request failed", e);
        }

    }

    private IdCacheLookup parseJsonResult(String rawJson) {
        try {
            IdCacheLookup parsedResponse = objectMapper.readValue(rawJson, IdCacheLookup.class);
            return parsedResponse;
        } catch (IOException e) {
            LOG.warn("Illegal json: {}", rawJson);
            throw new RuntimeException("Failed to parse json", e);
        }
    }

}
