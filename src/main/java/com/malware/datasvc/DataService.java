package com.malware.datasvc;

import com.malware.datasvc.response.MagicResult;
import com.malware.datasvc.response.MalwareScanResult;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class DataService {

    private static final Logger LOG = LoggerFactory.getLogger(DataService.class);

    private static final String SCAN_RESULT_PATH = "/camel/data/scanresult";
    private static final String MAGIC_PATH = "/camel/data/magicresult";

    private static final String JSON_CONTENT_TYPE = "text/plain";

    @Value("${dataservice.base.url}")
    private String baseUrl;

    private final CloseableHttpClient httpClient;

    public DataService(CloseableHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    /**
     * Query the data service for the malware scan result
     * @param message the message
     * @return the result
     * @throws IOException if
     */
    public MalwareScanResult processScanResult(String message) throws IOException {
        String url = baseUrl + SCAN_RESULT_PATH;


        HttpPost request = new HttpPost(url);
        request.setHeader(HttpHeaders.CONTENT_TYPE, JSON_CONTENT_TYPE);
        request.setHeader(HttpHeaders.ACCEPT, JSON_CONTENT_TYPE);
        HttpEntity requestEntity = new StringEntity(message);
        request.setEntity(requestEntity);

        MalwareScanResult result = new MalwareScanResult();
        try (CloseableHttpResponse response = httpClient.execute(request)) {
            int statusCode = response.getStatusLine().getStatusCode();
            HttpEntity entity = response.getEntity();
            String body = EntityUtils.toString(entity, StandardCharsets.UTF_8);
            Map<String, String> headers = new HashMap<>();
            for (Header header : response.getAllHeaders()) {
                headers.put(header.getName(), header.getValue());
            }

            if (statusCode == 200 && headers.containsKey("h_instance_id")) {
                LOG.info("Successfully received scan result http response from proxy service");
                result.setBody(body);
                result.setEngine(headers.get("h_engine"));
                long id = Long.parseLong(headers.get("h_instance_id"));
                result.setProcessInstanceId(id);

                return result;
            } else {
                LOG.warn("Magic lookup failed with status code {}. body = {}", statusCode, body);
                return null;
            }
        }
    }


    public MagicResult processMagicResult(String message) throws IOException {
        String url = baseUrl + MAGIC_PATH;

        // TODO: Use spring rest template
        HttpPost request = new HttpPost(url);
        request.setHeader(HttpHeaders.CONTENT_TYPE, JSON_CONTENT_TYPE);
        HttpEntity requestEntity = new StringEntity(message);
        request.setEntity(requestEntity);

        MagicResult result = new MagicResult();
        try (CloseableHttpResponse response = httpClient.execute(request)) {
            int statusCode = response.getStatusLine().getStatusCode();
            Map<String, String> headers = new HashMap<>();
            for (Header header : response.getAllHeaders()) {
                headers.put(header.getName(), header.getValue());
            }

            result.setBody(message);
            if (statusCode == 200 && headers.containsKey("h_instance_id")) {
                LOG.info("Successfully received magic http response from proxy service");
                long id = Long.parseLong(headers.get("h_instance_id"));
                result.setProcessInstanceId(id);
                return result;
            } else {
                String body = EntityUtils.toString(response.getEntity());
                LOG.warn("Magic lookup failed with status code {}. body = {}", statusCode, body);
                return null;
            }
        }
    }
}
