package com.malware.message;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.malware.controller.ProxyController;
import com.malware.datasvc.DataService;
import com.malware.datasvc.IdCacheLookup;
import com.malware.datasvc.MagicMessage;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.stereotype.Component;

@Component
public class MessageReceiver {
	
	private static final Logger LOG = LoggerFactory.getLogger(MessageReceiver.class);
	private static final String NSRL_ENGINE = "NSRL";
	private static final String METADEFENDER_ENGINE = "METADEFENDER";
	private static final String CUCKOO_ENGINE = "CUCKOO";

	@Value("${pam.signal.staticanalysis_nonarchive}")
	private String staticAnalysisNonArchiveSignal; //= "StaticNonArchiveAnalysisRcv";

	@Value("${pam.signal.dynamicanalysis}")
	private String dynamicAnalysisSignal; // = "DynamicAnalysisRcv";

	@Value("${pam.signal.staticanalysis_archive}")
	private String staticAnalysisArchiveSignal; // = "StaticArchiveAnalysisRcv";

	@Value("${pam.signal.nsrl_response}")
	private String nsrlSignal; // = "NsrlResultRcv";

	@Value("${pam.signal.magic}")
	private String magicSignal; // = "MagicResultRcv";

	private final ProxyController pamController;
	private final DataService dataService;
	private final ObjectMapper mapper;

	@Autowired
	public MessageReceiver(ProxyController pamController, DataService dataService, ObjectMapper mapper) {
		this.pamController = pamController;
		this.dataService = dataService;
		this.mapper = mapper;
	}

	/*
	 * Message receiver that listens to a queue
	 */
	@JmsListener(destination = "${spring.queue.name}")
    public void receiveMessage(Message submissionReq)
    {
        LOG.info("Received from submission queue: {}", submissionReq );
        
        pamController.startWorkflow(submissionReq.getMessage(), 0, "0", "0");
    }
	
	/*
	 * Message receiver that listens to a queue
	 */
	@JmsListener(destination = "${file.stage.queue}")
    public void receiveStagedMessage(Message submissionReq,
    								 @Header(name = "h_level", defaultValue="0") Integer filelevel,
    								 @Header(name = "h_sid", defaultValue="0") String sid,
    								 @Header(name = "h_submissionId", defaultValue="0") String submissionId) 
    {
        LOG.info("Received from staged queue: {} and header file level is {} and header sid is {} and submission id is {}", submissionReq, filelevel, sid, submissionId);
        
        pamController.startWorkflow(submissionReq.getMessage(), filelevel, sid, submissionId);
    }

    @JmsListener(destination = "${malware.scan.output}")
    public void receiveScanResultMessage(Message submissionReq) throws UnsupportedEncodingException {
		LOG.info("Received message from scan result: {}", submissionReq);
		List<IdCacheLookup> lookupResults = dataService.processMalwareResult(submissionReq.getMessage());

		LOG.info("lookupResults = {}", lookupResults );
		for (IdCacheLookup result : lookupResults) {

			// Mock message
			String responseMessage = "{\n"
				+ "  \"analysisReports\": [\n"
				+ "    {\n"
				+ "      \"tid\": \"" + result.getTid() + "\",\n"
				+ "      \"type\": \"Static\",\n"
				+ "      \"filename\": \"nsrl_test.json\",\n"
				+ "      \"report_path\": \"/mng/for_stix__mapping/\",\n"
				+ "      \"status\": \"Completed\"\n"
				+ "    }  \n"
				+ "  ]\n"
				+ "}";

			long processInstanceId = result.getProcessInstanceId();
			switch (result.getAnalysisEngine()) {
				case NSRL_ENGINE:
					pamController.triggerEvent(processInstanceId, nsrlSignal, responseMessage);
					break;
				case METADEFENDER_ENGINE:
					// Should this trigger both events?
					pamController.triggerEvent(processInstanceId, staticAnalysisNonArchiveSignal, responseMessage);
					pamController.triggerEvent(processInstanceId, staticAnalysisArchiveSignal, responseMessage);
					break;
				case CUCKOO_ENGINE:
					pamController.triggerEvent(processInstanceId, dynamicAnalysisSignal, responseMessage);
					break;
			}
		}
	}

	@JmsListener(destination = "${magic.queue.output}")
	public void handleMagicEvent(Message submissionReq) throws IOException {

		// TODO: Get schema for this.
		LOG.info("Receive magic message");

		MagicMessage submission = mapper.readValue(submissionReq.getMessage(), MagicMessage.class);

		String message = "\n"
			+ "{\n"
			+ "  \"file_data\": [\n"
			+ "                 {\n"
			+ "                    \"entropy\": 3.2464393446710154,\n"
			+ "                    \"file_name\": \"mng/tmp/zips/me.zip\",\n"
			+ "                    \"file_size_bytes\": \"373\",\n"
			+ "                     \"magic\": \"Zip archive data, at least v2.0 to extract\",\n"
			+ "                     \"magic_number\": \"504b0304\",\n"
			+ "                     \"ssdeep\": \"6:53RM/269eXLQtk8B02HcCrRflzRM/20S/CXws3AzEbzN2ztkQAh10\"\n"
			+ "                  }\n"
			+ "               ]\n"
			+ "}";

		pamController.triggerEvent(submission.getProcessInstanceId(), magicSignal, message);

	}
}
