package com.malware.message;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.malware.controller.ProxyController;
import com.malware.datasvc.DataService;
import com.malware.datasvc.IdCacheLookup;
import com.malware.message.AnalysisReport.ReportItem;
import com.malware.message.MagicMessage.FileInfo;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.stereotype.Component;

@Component
public class MessageReceiver {
	
	private static final Logger LOG = LoggerFactory.getLogger(MessageReceiver.class);
	private static final String NSRL_ENGINE = "NSRL";
	private static final String METADEFENDER_ENGINE = "METADEFENDER";
	private static final String CUCKOO_ENGINE = "CUCKOO";

	@Value("${pam.signal.staticanalysis_nonarchive}")
	private String staticAnalysisNonArchiveSignal; //= "StaticNonArchiveAnalysisRcv";

	@Value("${pam.signal.dynamicanalysis}")
	private String dynamicAnalysisSignal; // = "DynamicAnalysisRcv";

	@Value("${pam.signal.staticanalysis_archive}")
	private String staticAnalysisArchiveSignal; // = "StaticArchiveAnalysisRcv";

	@Value("${pam.signal.nsrl_response}")
	private String nsrlSignal; // = "NsrlResultRcv";

	@Value("${pam.signal.magic}")
	private String magicSignal; // = "MagicResultRcv";

	private final ProxyController pamController;
	private final DataService dataService;
	private final ObjectMapper mapper;

	@Autowired
	public MessageReceiver(ProxyController pamController, DataService dataService, ObjectMapper mapper) {
		this.pamController = pamController;
		this.dataService = dataService;
		this.mapper = mapper;
	}

	/*
	 * Message receiver that listens to a queue
	 */
	@JmsListener(destination = "${spring.queue.name}")
    public void receiveMessage(Message submissionReq)
    {
        LOG.info("Received from submission queue: {}", submissionReq );
        
        pamController.startWorkflow(submissionReq.getMessage(), 0, "0", "0");
    }
	
	/*
	 * Message receiver that listens to a queue
	 */
	@JmsListener(destination = "${file.stage.queue}")
    public void receiveStagedMessage(Message submissionReq,
    								 @Header(name = "h_level", defaultValue="0") Integer filelevel,
    								 @Header(name = "h_sid", defaultValue="0") String sid,
    								 @Header(name = "h_submissionId", defaultValue="0") String submissionId) 
    {
        LOG.info("Received from staged queue: {} and header file level is {} and header sid is {} and submission id is {}", submissionReq, filelevel, sid, submissionId);
        
        pamController.startWorkflow(submissionReq.getMessage(), filelevel, sid, submissionId);
    }

	/**
	 * This will receive messages from the magic queue & forward them to the relevant process
	 * @param submissionReq the  input message
	 * @throws IOException if the message could not be parsed
	 */
	@JmsListener(destination = "${magic.queue.output}")
	public void handleMagicEvent(Message submissionReq) throws IOException {

		MagicMessage magic  = mapper.readValue(submissionReq.getMessage(), MagicMessage.class);

		for (FileInfo info : magic.getFiles()) {
			IdCacheLookup lookupResult = dataService.lookupProcessId(info.getSid(), info.getTid());
			pamController.triggerEvent(lookupResult.getProcessInstanceId(), magicSignal, submissionReq.getMessage());
		}

	}

	/**
	 * This will receive a message from the malware scan results queue and signal the relevant WAIT events.
	 */
	@JmsListener(destination = "${malware.scan.output}")
	public void receiveScanResultMessage(Message submissionReq) throws IOException {
		LOG.info("Received message from scan result: {}", submissionReq);

		MalwareScanResult result = mapper.readValue(submissionReq.getMessage(), MalwareScanResult.class);

		IdCacheLookup lookupResult = dataService.lookupProcessId(result.getSid(), result.getTid());
		long processInstanceId = lookupResult.getProcessInstanceId();

		String report = mapper.writeValueAsString(buildReport(result));
		switch (result.getAnalysisEngine()) {
			case NSRL_ENGINE:
				pamController.triggerEvent(processInstanceId, nsrlSignal, report);
				break;
			case METADEFENDER_ENGINE:
				// Should this trigger both events?
				pamController.triggerEvent(processInstanceId, staticAnalysisNonArchiveSignal, report);
				pamController.triggerEvent(processInstanceId, staticAnalysisArchiveSignal, report);
				break;
			case CUCKOO_ENGINE:
				pamController.triggerEvent(processInstanceId, dynamicAnalysisSignal, report);
				break;
		}
	}

	private AnalysisReport buildReport(MalwareScanResult scanResult) {
		ReportItem item = new ReportItem();

		if (METADEFENDER_ENGINE.equals(scanResult.getAnalysisEngine())) {
			item.setStatus("Static");
		} else if (CUCKOO_ENGINE.equals(scanResult.getAnalysisEngine())) {
			item.setStatus("Dynamic");
		} else {
			// TODO: Does NSRL scan use same format? Assuming yes
			item.setStatus("Nsrl");
		}

		String resultLocation = scanResult.getAnalysisResultLocation();
		int fileSplitIdx = resultLocation.lastIndexOf('/') + 1;
		String path = resultLocation.substring(0, fileSplitIdx);
		String file = resultLocation.substring(fileSplitIdx);
		item.setReportPath(path);
		item.setFileName(file);

		item.setTid(scanResult.getTid());
		item.setStatus("Completed");  // What other status can this be?

		return new AnalysisReport(item);
	}
}
