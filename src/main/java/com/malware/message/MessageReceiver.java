package com.malware.message;

import com.malware.controller.ProxyController;
import com.malware.datasvc.DataService;
import com.malware.datasvc.IdCacheLookup;
import java.io.UnsupportedEncodingException;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.stereotype.Component;

@Component
public class MessageReceiver {
	
	private static final Logger LOG = LoggerFactory.getLogger(MessageReceiver.class);
	private static final String STATIC_ANALYSIS_EVENT = "StaticNonArchiveAnalysisRcv";
	private static final String DYNAMIC_ANALYSIS_EVENT = "DynamicAnalysisRcv";
	private static final String STATIC_ANALYSIS_NONZIP_EVENT = "StaticArchiveAnalysisRcv";
	private static final String NSRL_EVENT = "NsrlResultRcv";

	private final ProxyController pamController;
	private final DataService dataService;

	@Autowired
	public MessageReceiver(ProxyController pamController, DataService dataService) {
		this.pamController = pamController;
		this.dataService = dataService;
	}

	/*
	 * Message receiver that listens to a queue
	 */
	@JmsListener(destination = "${spring.queue.name}")
    public void receiveMessage(Message submissionReq)
    {
        LOG.info("Received from submission queue: {}", submissionReq );
        
        pamController.startWorkflow(submissionReq.getMessage(), 0, "0", "0");
    }
	
	/*
	 * Message receiver that listens to a queue
	 */
	@JmsListener(destination = "${file.stage.queue}")
    public void receiveStagedMessage(Message submissionReq,
    								 @Header(name = "h_level", defaultValue="0") Integer filelevel,
    								 @Header(name = "h_sid", defaultValue="0") String sid,
    								 @Header(name = "h_submissionId", defaultValue="0") String submissionId) 
    {
        LOG.info("Received from staged queue: {} and header file level is {} and header sid is {} and submission id is {}", submissionReq, filelevel, sid, submissionId);
        
        pamController.startWorkflow(submissionReq.getMessage(), filelevel, sid, submissionId);
    }

    @JmsListener(destination = "${malware.scan.output}")
    public void receiveScanResultMessage(Message submissionReq) throws UnsupportedEncodingException {
		LOG.info("Received message from scan result: {}", submissionReq);
		List<IdCacheLookup> lookupResults = dataService.processMalwareResult(submissionReq.getMessage());

		LOG.info("lookupResults = {}", lookupResults );
		for (IdCacheLookup result : lookupResults) {
//			pamController.triggerEvent(result.getProcessInstanceId(), "MagicResultRcv", "{\n"
//				+ "  \"file_data\": [\n"
//				+ "                 {\n"
//				+ "                    \"entropy\"3.2464393446710154,\n"
//				+ "                    \"file_name\": \"mng/tmp/zips/me.zip\",\n"
//				+ "                    \"file_size_bytes\": \"373\",\n"
//				+ "                     \"magic\": \"Zip archive data, at least v2.0 to extract\",\n"
//				+ "                     \"magic_number\": \"504b0304\",\n"
//				+ "                     \"ssdeep\": \"6:53RM/269eXLQtk8B02HcCrRflzRM/20S/CXws3AzEbzN2ztkQAh10\"\n"
//				+ "                  }\n"
//				+ "               ]\n"
//				+ "}");
			
			if (result.getAnalysisEngine().equals("NSRL")) {
				pamController.triggerEvent(result.getProcessInstanceId(), NSRL_EVENT, "");
			} else if (result.getAnalysisEngine().equals("METADEFENDER")) {
				// Should this trigger both events?
				pamController.triggerEvent(result.getProcessInstanceId(), STATIC_ANALYSIS_EVENT, "");
				pamController.triggerEvent(result.getProcessInstanceId(), STATIC_ANALYSIS_NONZIP_EVENT, "");
			} else if (result.getAnalysisEngine().equals("CUCKOO")) {
				pamController.triggerEvent(result.getProcessInstanceId(), DYNAMIC_ANALYSIS_EVENT, "");
			}
		}

	}
}
