package com.malware;


import static org.junit.Assert.assertEquals;

import javax.jms.JMSException;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;

import org.apache.activemq.broker.BrokerService;
import org.apache.activemq.broker.jmx.BrokerViewMBean;
import org.apache.activemq.broker.jmx.QueueViewMBean;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestName;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import com.malware.MessageProducer;
import com.malware.MessageReceiver;

@RunWith(SpringRunner.class)
@SpringBootTest
public class ProxyServiceTest {

    private static BrokerService brokerService;
    private static String destination;
    
    @Autowired
    public MessageReceiver consumer;

    @Autowired
    public MessageProducer producer;

    @Rule
    public TestName name = new TestName();

    @BeforeClass
    public static void setUp() throws Exception {
    	destination = "PamQueueUnitTest";
        brokerService = new BrokerService();

        brokerService.addConnector("amqp://localhost:5672");
        brokerService.setPersistent(false);
        brokerService.getManagementContext().setCreateConnector(false);

        brokerService.start();
        brokerService.waitUntilStarted();
    }

    @AfterClass
    public static void tearDown() throws Exception {
        brokerService.stop();
        brokerService.waitUntilStopped();
    }

    @Test
    public void testMessageIsSent() throws Exception {
    	
        producer.sendMessage("Hello: " + name.getMethodName(), "amqp://localhost:5672", destination); 

        QueueViewMBean queueView = getProxyToQueue(destination);
        assertEquals(1, queueView.getEnqueueCount());
    }

/*    @Test
    public void testMessageIsSentByPool() throws Exception {
    	
        for (int i = 0; i < 10; ++i) {
        	producer.sendMessage("Hello: " + name.getMethodName(), "amqp://localhost:5672",
        			destination);
        }   	
        
        // Should have our send plus the one's sent by the run in the previous test case
        QueueViewMBean queueView = getProxyToQueue(destination);
        assertEquals(11, queueView.getEnqueueCount());

        BrokerViewMBean brokerView = getProxyToBroker();
        assertEquals(2, brokerView.getCurrentConnectionsCount());
    }*/
    
    protected BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
        ObjectName brokerViewMBean = new ObjectName(
            "org.apache.activemq:type=Broker,brokerName=localhost");
        BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
                .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
        return proxy;
    }

    protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
        ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
        QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
                .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
        return proxy;
    }

}
